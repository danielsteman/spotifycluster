{"version":3,"sources":["components/Login.js","components/Covers.js","components/Home.js","hooks/useWinDims.js","components/Plot.js","assets/loading_animation_v1.svg","components/LoadingScreen.js","components/Playlist.js","components/ErrorScreen.js","App.js","components/Root.js","index.js"],"names":["LoginTitle","styled","div","typing","keyframes","blinkCaret","LoginTypewriter","LoginTypewriterContainer","LoginContainer","LoginButton","button","Login","handleLogin","useState","activeIndex","setActiveIndex","models","useEffect","setTimeout","length","onClick","Grid","PlaylistsCoversContainer","PlaylistsCover","img","PlaylistsInfoContainer","PlaylistsInfoTitle","PlaylistsInstuctionText","PlaylistsInfoText","PlotButton","Covers","images","selectPlaylist","userInfo","titles","ids","artists","features","TSNEfeatures","playlistList","selectedPlaylist","setSelectPlaylistId","data","map","artist","index","history","useHistory","image","src","alt","x","id","display_name","filter","value","self","indexOf","push","pathname","Home","authenticated","getLabels","url","to","getWindowDimensions","window","width","innerWidth","height","innerHeight","ScatterPlot","labels","Xdim","Ydim","Zdim","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","axesStyle","tick0","tickcolor","tickwidth","gridcolor","gridwidth","zerolinecolor","zerolinewidth","style","transform","config","displayModeBar","y","z","type","mode","marker","color","symbol","hoverlabel","bgcolor","hoverinfo","text","dataPointLabels","layout","margin","pad","paper_bgcolor","scene","aspectmode","yaxis","xaxis","zaxis","Animation","object","LoadingScreen","LoadingAnimation","ButtonContainer","Playlist","dimensionOptions","TSNE1","array","TSNE2","TSNE3","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","tempo","valence","setData","selectedDimX","setSelectedDimX","selectedDimY","setSelectedDimY","selectedDimZ","setSelectedDimZ","XButtonTitle","setXButtonTitle","YButtonTitle","setYButtonTitle","ZButtonTitle","setZButtonTitle","location","useLocation","TSNE_features","buttonTitle","axis","undefined","DropdownButton","title","Object","entries","dim","Dropdown","Item","eventKey","selectDims","keys","model","DropdownItem","ErrorPage","App","loading","showLoading","hideLoading","setAuthenticated","setPlaylistList","setUserInfo","setTitles","setArtists","setIds","setSelectedPlaylist","setFeatures","setTSNEfeatures","setLabels","fetch","then","response","json","console","log","status","playlists","items","user_profile","method","headers","body","JSON","stringify","match","useRouteMatch","playlist","find","Number","params","path","replace","playlistId","getPlaylistDataRecursively","track_ids","next_url","flat","interval","setInterval","state","result","clearInterval","component","ErrorScreen","Root","setLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a4a5224.chunk.js","sourcesContent":["import styled, { keyframes } from \"styled-components\";\nimport { useState, useEffect } from \"react\";\n\nconst LoginTitle = styled.div`\n    color : white;\n    font-size: 7vw;\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n`\n\nconst typing = keyframes`\n    0% { width: 0 }\n    20% { width: 0% }\n    30% { width: 100% }\n    70% { width: 100% }\n    80% { width: 0 }\n    100% { width: 0 }\n`\n\nconst blinkCaret = keyframes`\n    from, to { border-color: transparent }\n    50% { border-color: #11FD4C; }\n`\n\nconst LoginTypewriter = styled.div`\n    display: inline-block;\n    color : white;\n    font-size: 7vw;\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n\n    overflow: hidden; /* Ensures the content is not revealed until the animation */\n    border-right: .15em solid #11FD4C; /* The typwriter cursor */\n    white-space: nowrap; /* Keeps the content on a single line */\n\n    margin: 0 auto; /* Gives that scrolling effect as the typing happens */\n    animation: \n        ${typing} 5s steps(15, end) infinite,\n        ${blinkCaret} .75s step-end infinite;\n`\n\nconst LoginTypewriterContainer = styled.div`\n    width: max-content;\n`\n\nconst LoginContainer = styled.div`\n    margin: 3em;\n`\n\nconst LoginButton = styled.button`\n    padding: 1em;\n    margin-top: 1em;\n    margin-left: 50%;\n    transform: translate(-50%);\n\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n    font-size: 3vw;    \n    color: white;\n    \n    border: 7px solid;\n    border-color: white;\n    background-color: black;\n    width: max-content;\n\n    @media screen and (max-width: 500px) {\n        margin-top: 12em;\n    }\n`\n\nconst Login = ( {handleLogin} ) => {\n\n    const [activeIndex, setActiveIndex] = useState(0)\n\n    const models = ['K-means', 'Mean Shift', 'Affinity Propagation']\n\n    const nextModel = () => {\n        if (activeIndex < models.length - 1) {\n            setActiveIndex(activeIndex + 1)\n        } else {\n            setActiveIndex(0)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            nextModel()\n        }, 5000)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeIndex])\n\n    return (\n        <LoginContainer>\n            <LoginTitle>Find clusters in your Spotify playlists using...</LoginTitle>\n            <LoginTypewriterContainer>\n                <LoginTypewriter>{models[activeIndex]}</LoginTypewriter>\n            </LoginTypewriterContainer>\n            <LoginButton onClick={handleLogin}>Login</LoginButton>\n        </LoginContainer>\n    )\n}\n\nexport default Login","import styled from \"styled-components\";\nimport { useHistory } from 'react-router-dom';\nimport { useState } from \"react\";\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 50% 50%;\n`\n\nconst PlaylistsCoversContainer = styled.div`\n    padding: 1em;\n    grid-row-start: 1;\n    grid-column-start: 1;\n`\n\nconst PlaylistsCover = styled.img`\n    object-fit: cover;\n    width: 100%;\n    max-height: 100%;\n    margin-left: 50%;\n    transform: translate(-50%);\n    padding: 2vw 6vw;\n    @media screen and (min-width: 1025px) {\n        padding: 2vw 12vw;\n    }\n`\n\nconst PlaylistsInfoContainer = styled.div`\n    grid-row-start: 1;\n    grid-column-start: 2;\n    position: sticky;\n    top: 0;\n    height: 100vh;\n    padding: calc(1em + 2vh);\n    color: white;\n`\n\nconst PlaylistsInfoTitle = styled.div`\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n    font-size: 4vw;    \n    color: white;\n`\n\nconst PlaylistsInstuctionText = styled.div`\n    margin: 2vw 0;\n\n    font-family: 'Mulish', sans-serif;\n    font-style: italic;\n    font-weight: 300;\n    font-size: 2vw;    \n    color: white;\n`\n\nconst PlaylistsInfoText = styled.div`\n    font-family: 'Mulish', sans-serif;\n    font-weight: 300;\n    font-size: 2vw;    \n    color: white;\n`\n\nconst PlotButton = styled.button`\n    padding: 1em;\n    margin-top: 5em;\n\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n    font-size: 2vw;\n    color: white;\n    \n    border: 7px solid;\n    border-color: white;\n    background-color: black;\n    width: max-content;\n`\n\nconst Covers = ({ \n    images, \n    selectPlaylist, \n    userInfo, \n    ids, \n    titles, \n    artists, \n    features,\n    TSNEfeatures,\n    playlistList, \n    selectedPlaylist, \n    setSelectPlaylistId,\n    }) => {\n\n    const [taskId, setTaskId] = useState('')\n\n    function onlyUnique(value, index, self) {\n        return self.indexOf(value) === index;\n    }\n\n    const dataPointLabels = artists.map((artist, index) => {\n        return `${artist} - ${titles[index]}`\n    })\n\n    const data = {'dataPointLabels': dataPointLabels, 'TSNE_features': TSNEfeatures, 'features': features}\n\n    const history = useHistory()\n\n    return(\n        <Grid>\n            <PlaylistsCoversContainer>\n                {images.map((image, index) => (\n                    <PlaylistsCover\n                        key={index}\n                        src={image}\n                        alt=\"Playlist cover\"\n                        onClick={() => {\n                            selectPlaylist(playlistList.map(x => x.id)[index])\n                            setSelectPlaylistId(playlistList.map(x => x.id)[index])\n                        }}\n                    />\n                ))}\n            </PlaylistsCoversContainer>\n            <PlaylistsInfoContainer>\n                <PlaylistsInfoTitle>Hi, {userInfo.display_name}</PlaylistsInfoTitle>\n                <PlaylistsInstuctionText>Click on a playlist cover to fetch its data</PlaylistsInstuctionText>\n                {titles.length > 0\n                    && <div>\n                        <PlaylistsInfoText>No. of songs: {titles.length}</PlaylistsInfoText>\n                        <PlaylistsInfoText>No. of artists: {artists.filter(onlyUnique).length}</PlaylistsInfoText>\n                        <PlotButton onClick={() => {\n                            history.push({pathname: `playlists/${selectedPlaylist}`, data})\n                        }}>Plot</PlotButton>\n                    </div>\n                }\n                {/* <PlotButton \n                    onClick={() => {\n                        fetch('/spotify/dimension-reduction-async', {\n                            method: 'POST',\n                            headers: {\n                            'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({\n                                'features': features\n                            })\n                        })\n                        .then(response => response.json())\n                        .then(data => {\n                            console.log(data)\n                            setTaskId(data)\n                        })\n                    }}\n                >Celery start</PlotButton>\n                <PlotButton \n                    onClick={() => {\n                        fetch('/spotify/task-result', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'taskId': taskId\n                            }\n                        })\n                        .then(response => response.json())\n                        .then(data => {\n                            console.log(taskId)\n                            console.log(data)\n                        })\n                    }}\n                >Celery status</PlotButton> */}\n            </PlaylistsInfoContainer>\n        </Grid>\n    )\n}\n\nexport default Covers;","import { Redirect } from 'react-router-dom';\nimport Covers from './Covers'\n\nconst Home = ({ \n    authenticated, \n    userInfo, \n    playlistList, \n    selectPlaylist, \n    titles, \n    features,\n    TSNEfeatures,\n    ids, \n    artists, \n    selectedPlaylist, \n    setSelectPlaylistId,\n    getLabels\n}) => {\n    const images = playlistList.map(x => x.images[0].url)\n    if (authenticated) {\n        return(\n            <Covers\n                images={images} \n                selectPlaylist={selectPlaylist} \n                userInfo={userInfo}\n                titles={titles}\n                artists={artists}\n                features={features}\n                ids={ids}\n                playlistList={playlistList}\n                selectedPlaylist={selectedPlaylist}\n                setSelectPlaylistId={setSelectPlaylistId}\n                TSNEfeatures={TSNEfeatures}\n                getLabels={getLabels}\n            />\n        )\n    } else {\n        return (\n            <Redirect to='/login'/>\n        )\n    }\n}\n\nexport default Home","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import Plot from 'react-plotly.js';\nimport useWindowDimensions from '../hooks/useWinDims'\n\nconst ScatterPlot = ( {data, labels, Xdim, Ydim, Zdim} ) => {\n\n    // first item in tuple in data.titles is the song name, the second item is the artist\n    // const artistsAndTitles = data.titles.map(track => `${track[0]} - ${track[1]}`)\n\n    // use custom hook to retrieve fullscreen measurements\n    const { height, width } = useWindowDimensions()\n\n    const axesStyle = {\n        tick0: 0,\n        tickcolor: \"#D3D3D3\",\n        tickwidth: 2,\n        \n        gridcolor: \"#D3D3D3\",\n        gridwidth: 2,\n        \n        zerolinecolor: \"#D3D3D3\",\n        zerolinewidth: 2\n    }\n\n    return (\n        <Plot\n            style={{transform: 'scale(1.3)'}}\n            config={{displayModeBar: false}}\n            data={[\n                {\n                    x: Xdim,\n                    y: Ydim,\n                    z: Zdim,\n                    type: 'scatter3d',\n                    mode: 'markers',\n                    marker: {color: labels, symbol: 'circle'},\n                    hoverlabel: {bgcolor: 'grey'},\n                    hoverinfo: 'text',\n                    text: data.dataPointLabels\n                }\n            ]}\n            layout={ {\n                displayModeBar: false,\n                margin: {pad: 20},\n                width: width, \n                height: height,\n                paper_bgcolor: 'black',\n                scene: {\n                    aspectmode: 'auto',\n                    yaxis: axesStyle,\n                    xaxis: axesStyle,\n                    zaxis: axesStyle\n                }\n            } }\n        />\n    )\n}\n\nexport default ScatterPlot","export default __webpack_public_path__ + \"static/media/loading_animation_v1.2dd379a5.svg\";","import LoadingAnimation from '../assets/loading_animation_v1.svg'\nimport styled from \"styled-components\";\n\nconst Animation = styled.object`\n    height: 15vh;\n    width: 15vh;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%); \n    position: fixed;\n`\n\nconst LoadingScreen = () => (\n    <div>\n        <Animation type=\"image/svg+xml\" data={LoadingAnimation}>svg-animation</Animation>\n    </div>\n)\n\nexport default LoadingScreen","import { useLocation } from 'react-router-dom';\nimport React, { useState, useEffect } from \"react\";\nimport ScatterPlot from './Plot';\nimport LoadingScreen from './LoadingScreen'\nimport styled from \"styled-components\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownItem from 'react-bootstrap/esm/DropdownItem';\n\nconst ButtonContainer = styled.div`\n    position: absolute;\n    z-index: 1;\n    background-color: transparent;\n    text-align: center;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    width: 50%;\n    left: 50%;\n    transform: translateX(-50%)\n`\n\nconst Playlist = ({ getLabels, labels }) => {\n\n    const models = {\n        'K-means': {'params': {'n_clusters': 0}},\n        'Affinity Propagation': {'params': {'max_iter': 5000, 'convergence_iter': 150}},\n        'Mean Shift': {'params': {'n_jobs': -1}}\n    }\n\n    const dimensionOptions = {\n        TSNE1: {array: 'TSNE_features', index: 0},\n        TSNE2: {array: 'TSNE_features', index: 1},\n        TSNE3: {array: 'TSNE_features', index: 2},\n        acousticness: {array: 'features', index: 0},\n        danceability: {array: 'features', index: 1},\n        energy: {array: 'features', index: 2},\n        instrumentalness: {array: 'features', index: 3},\n        liveness: {array: 'features', index: 4},\n        loudness: {array: 'features', index: 5},\n        speechiness: {array: 'features', index: 6},\n        tempo: {array: 'features', index: 7},\n        valence: {array: 'features', index: 8}\n    }\n\n    const axes = [\n        'X axis',\n        'Y axis',\n        'Z axis'\n    ]\n\n    const [data, setData] = useState([])\n    const [selectedDimX, setSelectedDimX] = useState([])\n    const [selectedDimY, setSelectedDimY] = useState([])\n    const [selectedDimZ, setSelectedDimZ] = useState([])\n\n    const [XButtonTitle, setXButtonTitle] = useState('TSNE1')\n    const [YButtonTitle, setYButtonTitle] = useState('TSNE2')\n    const [ZButtonTitle, setZButtonTitle] = useState('TSNE3')\n\n    const location = useLocation();\n\n    useEffect(() => {\n        setData(location.data)\n        setSelectedDimX(location.data.TSNE_features.map(x => x[0]))\n        setSelectedDimY(location.data.TSNE_features.map(x => x[1]))\n        setSelectedDimZ(location.data.TSNE_features.map(x => x[2]))\n    }, [location.data, data])\n\n    const selectDims = (axis, value, dim) => {\n        if (axis === 'X axis') {\n            setSelectedDimX(data[value.array].map(x => x[value.index]))\n            setXButtonTitle(dim)\n        } else if (axis === 'Y axis') {\n            setSelectedDimY(data[value.array].map(x => x[value.index]))\n            setYButtonTitle(dim)\n        } else {\n            setSelectedDimZ(data[value.array].map(x => x[value.index]))\n            setZButtonTitle(dim)\n        }\n    }\n\n    const buttonTitle = (axis) => {\n        if (axis === 'X axis') {\n            return XButtonTitle\n        } else if (axis === 'Y axis') {\n            return YButtonTitle\n        } else {\n            return ZButtonTitle\n        }\n    }\n\n    if (data.TSNE_features === undefined) {return <LoadingScreen/>}\n    \n    return(\n        <div>\n            <ButtonContainer>\n                {axes.map((axis, index) => (\n                    <div key={index} style={{color: 'white'}}>\n                        <DropdownButton\n                            title={buttonTitle(axis)}\n                        >\n                            {Object.entries(dimensionOptions).map(([dim, value]) =>\n                                <div key={dim}>\n                                    <Dropdown.Item\n                                        eventKey={dim} \n                                        onClick={() => {selectDims(axis, value, dim)}}\n                                    >{dim}</Dropdown.Item>\n                                </div>\n                            )}\n                        </DropdownButton>\n                    </div>\n                ))}\n                <DropdownButton title='Model Selector'>\n                    {Object.keys(models).map((model, index) => (\n                        <DropdownItem \n                            eventKey={model}\n                            key={index}\n                            onClick={() => getLabels(model)}\n                        >{model}</DropdownItem>\n                    ))}\n                </DropdownButton>\n            </ButtonContainer>\n            <ScatterPlot\n                data={data}\n                labels={labels} \n                Xdim={selectedDimX}\n                Ydim={selectedDimY}\n                Zdim={selectedDimZ}\n            />\n        </div>\n    )\n}\n\nexport default Playlist","const ErrorPage = () => {\n    return (\n        <div>Page not found</div>\n    )\n}\n\nexport default ErrorPage","import { Switch, Route, useRouteMatch } from 'react-router-dom';\nimport Login from './components/Login'\nimport Home from './components/Home'\nimport Playlist from './components/Playlist'\nimport LoadingScreen from './components/LoadingScreen'\nimport ErrorScreen from './components/ErrorScreen'\nimport React, { useState, useEffect } from \"react\";\nimport './App.css'\n\nconst App = ({ loading, showLoading, hideLoading }) => {\n\n  const [authenticated, setAuthenticated] = useState(false)\n\n  const [playlistList, setPlaylistList] = useState([])\n  const [userInfo, setUserInfo] = useState({})\n  const [titles, setTitles] = useState([])\n  const [artists, setArtists] = useState([])\n  const [ids, setIds] = useState([])\n  const [selectedPlaylist, setSelectedPlaylist] = useState('')\n\n  const [features, setFeatures] = useState([])\n  const [TSNEfeatures, setTSNEfeatures] = useState([])\n\n  const [labels, setLabels] = useState([])\n\n  useEffect(() => {\n    fetch('/spotify/is-authenticated')\n      .then(response => response.json())\n      .then(data => {\n        console.log(`authentication status: ${data.status}`)\n        setAuthenticated(data.status)\n        hideLoading()\n      })\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (authenticated) {\n      fetch('/spotify/playlists')\n      .then(response => response.json())\n      .then(data => {\n        const ids = data.playlists.items.map(x => x.id)\n        setIds(ids)\n        setPlaylistList(data.playlists.items)\n      })\n      fetch('/spotify/user-profile')\n      .then(response => response.json())\n      .then(data => {\n        setUserInfo(data.user_profile)\n        hideLoading()\n      })\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [authenticated])\n\n  // setSelectPlaylistId method is passed down so the state can be updated from child components\n  const setSelectPlaylistId = (playlistId) => {\n    setSelectedPlaylist(playlistId)\n  }\n\n  const getLabels = (model) => {\n    showLoading()\n    fetch('/spotify/get-labels', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Model': model\n      },\n      body: JSON.stringify(features)\n    })\n    .then(response => response.json())\n    .then(data => {\n      setLabels(data)\n      hideLoading()\n    })\n  }\n\n  const fetchPlaylist = (playlistId) => {\n\n    showLoading()\n\n    setTitles([])\n    setArtists([])\n    setFeatures([])\n    setTSNEfeatures([])\n    setIds([])\n    setLabels([])\n\n    const features = []\n\n    const getPlaylistDataRecursively = (url) => {\n      return fetch('/spotify/get-track-ids', {headers: {\n        'url': url\n      }})\n      .then(response => response.json())\n      .then(data => {\n\n        console.log(data)\n\n        setTitles(titles => ([...titles, ...data.title]))\n        setArtists(artists => ([...artists, ...data.artist]))\n        setFeatures(features => ([...features, ...data.features]))\n        setIds(ids => ([...ids, ...data.track_ids]))\n        features.push(data.features)\n\n        if (data.next_url) {\n          const next_url = data.next_url.replace('https://api.spotify.com/v1', '')\n          return getPlaylistDataRecursively(next_url)\n        } else {\n\n          return fetch('/spotify/dimension-reduction-async', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              'features': features.flat()\n            })\n          })\n          .then(response => response.json())\n          .then(data => {\n            console.log(data)\n\n            const interval = setInterval(() => {\n              fetch('/spotify/task-result', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'taskId': data\n                }\n              })\n              .then(response => response.json())\n              .then(data => {\n                console.log(data)\n                if (data.state === 'SUCCESS') {\n                  setTSNEfeatures(data.result)\n                  clearInterval(interval)\n                }\n              })\n            }, 3000)\n          })\n        }\n      })\n    }\n\n    return getPlaylistDataRecursively(`/playlists/${playlistId}/tracks/?offset=0&limit=100`)\n      .then(() => {\n        hideLoading()\n      });\n  }\n\n  const handleLogin = () => {  \n    return(\n    fetch('/spotify/is-authenticated')\n      .then(response => response.json())\n      .then(data => {\n        if (!data.status) {\n          fetch('/spotify/get-auth-url')\n            .then(response => response.json())\n            .then(data => {\n              setAuthenticated(true)\n              window.location.replace(data.url)\n            })\n        }\n      })\n    )\n  }\n\n  const match = useRouteMatch('/playlists/:id')\n  const playlist = match\n    ? playlistList.find(playlist => playlist.id === Number(match.params.id))\n    : null\n\n  if (loading) { return <LoadingScreen/> }\n  return (\n    <div>\n      <Switch>\n        <Route path='/playlists/:id'>\n          <Playlist\n            id={playlist}\n            getLabels={getLabels}\n            labels={labels}\n          />\n        </Route>\n        <Route path='/login'>\n          <Login handleLogin={handleLogin} />\n        </Route>\n        <Route path='/'>\n          <Home\n            authenticated={authenticated}\n            userInfo={userInfo}\n            playlistList={playlistList}\n            selectPlaylist={fetchPlaylist}\n            titles={titles}\n            artists={artists}\n            features={features}\n            TSNEfeatures={TSNEfeatures}\n            ids={ids}\n            selectedPlaylist={selectedPlaylist}\n            setSelectPlaylistId={setSelectPlaylistId}\n            getLabels={getLabels}\n          />\n        </Route>\n        <Route component={ErrorScreen} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;","import {\n    BrowserRouter as Router\n  } from \"react-router-dom\";\nimport App from '../App';\nimport { useState } from 'react';\n\n// To get a loading screen between routes, I needed to lift the loading state to a HOC\n\nconst Root = () => {\n\n    const [loading, setLoading] = useState(true)\n\n    const showLoading = () => (\n        setLoading(true)\n    )\n\n    const hideLoading = () => (\n        setLoading(false)\n    )\n\n    return(\n        <Router>\n            <App loading={loading} showLoading={() => showLoading()} hideLoading={() => hideLoading()}/>\n        </Router>\n    )\n}\n\nexport default Root","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/Root'\n\nReactDOM.render(\n  <Root/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}