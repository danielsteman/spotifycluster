{"version":3,"sources":["components/Login.js","utils/uniqueValues.js","components/Covers.js","components/Home.js","hooks/useWinDims.js","components/Plot.js","assets/loading_animation_v1.svg","components/LoadingScreen.js","utils/pagination.js","services/generateAndFill.js","components/ToggleableWarning.js","components/Playlist.js","components/ErrorScreen.js","components/ResultPage.js","App.js","components/Root.js","index.js"],"names":["LoginTitle","styled","div","typing","keyframes","blinkCaret","LoginTypewriter","LoginTypewriterContainer","LoginContainer","LoginButton","button","Login","login","useState","activeIndex","setActiveIndex","models","useEffect","setTimeout","length","onClick","uniqueValues","arr","filter","item","pos","indexOf","Grid","PlaylistsCoversContainer","PlaylistsCover","img","PlaylistsInfoContainer","PlaylistsInfoTitle","PlaylistsInstuctionText","PlaylistsInfoText","PlotButton","Covers","images","selectPlaylist","userInfo","titles","artists","features","TSNEfeatures","playlistList","selectedPlaylist","setSelectPlaylistId","data","map","artist","index","id","history","useHistory","image","src","alt","x","display_name","push","pathname","Home","authenticated","ids","uris","getLabels","labels","url","to","getWindowDimensions","window","width","innerWidth","height","innerHeight","ScatterPlot","Xdim","Ydim","Zdim","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","axesStyle","tick0","tickcolor","tickwidth","gridcolor","gridwidth","zerolinecolor","zerolinewidth","style","transform","config","displayModeBar","y","z","type","mode","marker","color","symbol","hoverlabel","bgcolor","hoverinfo","text","dataPointLabels","layout","margin","pad","paper_bgcolor","scene","aspectmode","yaxis","xaxis","zaxis","Animation","object","LoadingCaption","LoadingScreen","loadingCaption","LoadingAnimation","pagination","array","batchSize","pages","Math","ceil","choppedUpArray","i","slice","generatePlaylists","userId","name","n","a","headers","axios","method","res","console","log","fillPlaylist","playlistId","forEach","batch","generateAndFill","setOfLabels","playlistIds","element","songs","_","ToggleableWarning","toggleWarning","warningVisible","showLoading","hideLoading","Toast","show","onClose","Header","className","Body","Button","ButtonContainer","GeneratePlaylistsButtonContainer","Playlist","dimensionOptions","TSNE1","TSNE2","TSNE3","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","tempo","valence","setData","selectedDimX","setSelectedDimX","selectedDimY","setSelectedDimY","selectedDimZ","setSelectedDimZ","XButtonTitle","setXButtonTitle","YButtonTitle","setYButtonTitle","ZButtonTitle","setZButtonTitle","setWarningVisible","setUserId","location","useLocation","TSNE_features","buttonTitle","axis","undefined","DropdownButton","title","Object","entries","dim","value","Dropdown","Item","eventKey","selectDims","keys","model","DropdownItem","ErrorPage","ResultPage","App","loading","setAuthenticated","setPlaylistList","setUserInfo","setTitles","setArtists","setIds","setUris","setSelectedPlaylist","setFeatures","setTSNEfeatures","setLabels","fetch","then","response","json","status","playlists","items","user_profile","body","JSON","stringify","interval","setInterval","state","result","clearInterval","match","useRouteMatch","playlist","find","Number","params","path","replace","getPlaylistDataRecursively","track_ids","track_uris","next_url","flat","component","ErrorScreen","Root","setLoading","setLoadingCaption","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee2ef9d5.chunk.js","sourcesContent":["import styled, { keyframes } from \"styled-components\";\nimport { useState, useEffect } from \"react\";\n\nconst LoginTitle = styled.div`\n    color : white;\n    font-size: 7vw;\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n`\n\nconst typing = keyframes`\n    0% { width: 0 }\n    20% { width: 0% }\n    30% { width: 100% }\n    70% { width: 100% }\n    80% { width: 0 }\n    100% { width: 0 }\n`\n\nconst blinkCaret = keyframes`\n    from, to { border-color: transparent }\n    50% { border-color: #11FD4C; }\n`\n\nconst LoginTypewriter = styled.div`\n    display: inline-block;\n    color : white;\n    font-size: 7vw;\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n\n    overflow: hidden; /* Ensures the content is not revealed until the animation */\n    border-right: .15em solid #11FD4C; /* The typwriter cursor */\n    white-space: nowrap; /* Keeps the content on a single line */\n\n    margin: 0 auto; /* Gives that scrolling effect as the typing happens */\n    animation: \n        ${typing} 5s steps(15, end) infinite,\n        ${blinkCaret} .75s step-end infinite;\n`\n\nconst LoginTypewriterContainer = styled.div`\n    width: max-content;\n`\n\nconst LoginContainer = styled.div`\n    margin: 3em;\n`\n\nconst LoginButton = styled.button`\n    padding: 1em;\n    margin-top: 1em;\n    margin-left: 50%;\n    transform: translate(-50%);\n\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n    font-size: 3vw;    \n    color: white;\n    \n    border: 7px solid;\n    border-color: white;\n    background-color: black;\n    width: max-content;\n\n    @media screen and (max-width: 500px) {\n        margin-top: 12em;\n    }\n`\n\nconst Login = ( {login} ) => {\n\n    const [activeIndex, setActiveIndex] = useState(0)\n\n    const models = ['K-means', 'Mean Shift', 'Affinity Propagation']\n\n    const nextModel = () => {\n        if (activeIndex < models.length - 1) {\n            setActiveIndex(activeIndex + 1)\n        } else {\n            setActiveIndex(0)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            nextModel()\n        }, 5000)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeIndex])\n\n    return (\n        <LoginContainer>\n            <LoginTitle>Find clusters in your Spotify playlists using...</LoginTitle>\n            <LoginTypewriterContainer>\n                <LoginTypewriter>{models[activeIndex]}</LoginTypewriter>\n            </LoginTypewriterContainer>\n            <LoginButton onClick={() => {\n                login()\n            }}>Login</LoginButton>\n        </LoginContainer>\n    )\n}\n\nexport default Login","const uniqueValues = (arr) => {\n\n    var filteredArray = arr.filter(function(item, pos){\n        return arr.indexOf(item) === pos; \n    });\n    return filteredArray\n\n}\n\nexport default uniqueValues","import styled from \"styled-components\";\nimport { useHistory } from 'react-router-dom';\nimport uniqueValues from \"../utils/uniqueValues\";\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 50% 50%;\n`\n\nconst PlaylistsCoversContainer = styled.div`\n    padding: 1em;\n    grid-row-start: 1;\n    grid-column-start: 1;\n`\n\nconst PlaylistsCover = styled.img`\n    object-fit: cover;\n    width: 100%;\n    max-height: 100%;\n    margin-left: 50%;\n    transform: translate(-50%);\n    padding: 2vw 6vw;\n    @media screen and (min-width: 1025px) {\n        padding: 2vw 12vw;\n    }\n`\n\nconst PlaylistsInfoContainer = styled.div`\n    grid-row-start: 1;\n    grid-column-start: 2;\n    position: sticky;\n    top: 0;\n    height: 100vh;\n    padding: calc(1em + 2vh);\n    color: white;\n`\n\nconst PlaylistsInfoTitle = styled.div`\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n    font-size: 4vw;    \n    color: white;\n`\n\nconst PlaylistsInstuctionText = styled.div`\n    margin: 2vw 0;\n\n    font-family: 'Mulish', sans-serif;\n    font-style: italic;\n    font-weight: 300;\n    font-size: 2vw;    \n    color: white;\n`\n\nconst PlaylistsInfoText = styled.div`\n    font-family: 'Mulish', sans-serif;\n    font-weight: 300;\n    font-size: 2vw;    \n    color: white;\n`\n\nconst PlotButton = styled.button`\n    padding: 1em;\n    margin-top: 5em;\n\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n    font-size: 2vw;\n    color: white;\n    \n    border: 7px solid;\n    border-color: white;\n    background-color: black;\n    width: max-content;\n`\n\nconst Covers = ({ \n    images, \n    selectPlaylist, \n    userInfo, \n    titles,\n    artists, \n    features,\n    TSNEfeatures,\n    playlistList, \n    selectedPlaylist, \n    setSelectPlaylistId\n    }) => {\n\n    const dataPointLabels = artists.map((artist, index) => {\n        return `${artist} - ${titles[index]}`\n    })\n\n    const data = {\n        'dataPointLabels': dataPointLabels, \n        'TSNE_features': TSNEfeatures, \n        'features': features, \n        'userId': userInfo.id,\n    }\n\n    const history = useHistory()\n\n    return(\n        <Grid>\n            <PlaylistsCoversContainer>\n                {images.map((image, index) => (\n                    <PlaylistsCover\n                        key={index}\n                        src={image}\n                        alt=\"Playlist cover\"\n                        onClick={() => {\n                            selectPlaylist(playlistList.map(x => x.id)[index])\n                            setSelectPlaylistId(playlistList.map(x => x.id)[index])\n                        }}\n                    />\n                ))}\n            </PlaylistsCoversContainer>\n            <PlaylistsInfoContainer>\n                <PlaylistsInfoTitle>Hi, {userInfo.display_name}</PlaylistsInfoTitle>\n                <PlaylistsInstuctionText>Click on a playlist cover to fetch its data</PlaylistsInstuctionText>\n                {titles.length > 0\n                    && <div>\n                        <PlaylistsInfoText>No. of songs: {titles.length}</PlaylistsInfoText>\n                        <PlaylistsInfoText>No. of artists: {uniqueValues(artists).length}</PlaylistsInfoText>\n                        {TSNEfeatures.length > 0\n                            && <PlotButton onClick={() => {\n                                history.push({pathname: `playlists/${selectedPlaylist}`, data})\n                            }}>Plot</PlotButton>\n                        }\n                    </div>\n                }\n            </PlaylistsInfoContainer>\n        </Grid>\n    )\n}\n\nexport default Covers;","import { Redirect } from 'react-router-dom';\nimport Covers from './Covers'\n\nconst Home = ({ \n    authenticated, \n    userInfo, \n    playlistList, \n    selectPlaylist, \n    titles, \n    features,\n    TSNEfeatures,\n    ids, \n    uris,\n    artists, \n    selectedPlaylist, \n    setSelectPlaylistId,\n    getLabels,\n    labels\n}) => {\n    const images = playlistList.map(x => x.images[0] ? x.images[0].url : '')\n    if (authenticated) {\n        return(\n            <Covers\n                images={images}\n                selectPlaylist={selectPlaylist} \n                userInfo={userInfo}\n                titles={titles}\n                artists={artists}\n                features={features}\n                ids={ids}\n                playlistList={playlistList}\n                selectedPlaylist={selectedPlaylist}\n                setSelectPlaylistId={setSelectPlaylistId}\n                TSNEfeatures={TSNEfeatures}\n                getLabels={getLabels}\n            />\n        )\n    } else {\n        return (\n            <Redirect to='/login'/>\n        )\n    }\n}\n\nexport default Home","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import Plot from 'react-plotly.js';\nimport useWindowDimensions from '../hooks/useWinDims'\n\nconst ScatterPlot = ( {data, labels, Xdim, Ydim, Zdim} ) => {\n\n    // use custom hook to retrieve fullscreen measurements\n    const { height, width } = useWindowDimensions()\n\n    const axesStyle = {\n        tick0: 0,\n        tickcolor: \"#D3D3D3\",\n        tickwidth: 2,\n        \n        gridcolor: \"#D3D3D3\",\n        gridwidth: 2,\n        \n        zerolinecolor: \"#D3D3D3\",\n        zerolinewidth: 2\n    }\n\n    return (\n        <Plot\n            style={{transform: 'scale(1.3)'}}\n            config={{displayModeBar: false}}\n            data={[\n                {\n                    x: Xdim,\n                    y: Ydim,\n                    z: Zdim,\n                    type: 'scatter3d',\n                    mode: 'markers',\n                    marker: {color: labels, symbol: 'circle'},\n                    hoverlabel: {bgcolor: 'grey'},\n                    hoverinfo: 'text',\n                    text: data.dataPointLabels\n                }\n            ]}\n            layout={ {\n                displayModeBar: false,\n                margin: {pad: 20},\n                width: width, \n                height: height,\n                paper_bgcolor: 'black',\n                scene: {\n                    aspectmode: 'auto',\n                    yaxis: axesStyle,\n                    xaxis: axesStyle,\n                    zaxis: axesStyle\n                }\n            } }\n        />\n    )\n}\n\nexport default ScatterPlot","export default __webpack_public_path__ + \"static/media/loading_animation_v1.2dd379a5.svg\";","import LoadingAnimation from '../assets/loading_animation_v1.svg'\nimport styled from \"styled-components\";\n\nconst Animation = styled.object`\n    height: 15vh;\n    width: 15vh;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%); \n    position: fixed;\n    text-align: center;\n`\n\nconst LoadingCaption = styled.div`\n    top: 60%;\n    left: 50%;\n    transform: translate(-50%);\n    font-size: 1.5vh;\n    position: absolute;\n    color: white;\n    font-weight: 700;\n`\n\nconst LoadingScreen = ({ loadingCaption }) => (\n    <div>\n        <Animation type=\"image/svg+xml\" data={LoadingAnimation}>svg-animation</Animation>\n        <LoadingCaption>{loadingCaption}</LoadingCaption>\n    </div>\n)\n\nexport default LoadingScreen","const pagination = (array, batchSize) => {\n    \n    const pages = Math.ceil(array.length / batchSize)\n    const choppedUpArray = []\n    for (let i = 0; i < pages; i++) {\n        const slice = array.slice(i * batchSize, batchSize + i * batchSize)\n        choppedUpArray.push(slice)\n    }\n    return choppedUpArray\n    \n}\n\nexport default pagination","import axios from 'axios';\nimport uniqueValues from '../utils/uniqueValues'\nimport pagination from '../utils/pagination'\n\nconst generatePlaylists = async (userId, name, n) => {\n\n    const headers = {\n        'user-id': userId,\n        'new-playlist-name': name,\n        'n': n\n    }\n    try {\n        const res = await axios({\n            method: 'post',\n            url: '/spotify/generate-playlists', \n            headers: headers\n        })\n        const data = await res.data\n        return data\n    } catch (e) {\n        console.log(e)\n    }\n    \n}\n\nconst fillPlaylist = async (playlistId, uris) => {\n\n    let _uris = []\n\n    if (uris.length > 100) {\n        _uris = pagination(uris)\n    } else {\n        _uris = [uris]\n    }\n\n    _uris.forEach(async batch => {\n        let headers = {\n            'playlist-id': playlistId,\n            'uris': batch\n        }\n        try {\n            const res = await axios({\n                method: 'post',\n                url: '/spotify/fill-playlist',\n                headers: headers\n            })\n            const data = await res.data\n            return data\n        } catch (e) {\n            console.log(e)\n        }\n    })\n\n}\n\nconst generateAndFill = async (labels, uris, userId, name) => {\n\n    const setOfLabels = uniqueValues(labels)\n    const n = setOfLabels.length\n    const playlistIds = await generatePlaylists(userId, name, n)\n    \n    // For each label, check if the label matches a label from the set of labels and assign to a playlist.\n    // It doesn't matter to which playlist the cluster is assigned because no unique characteristics are identified for each cluster.\n\n    setOfLabels.forEach( async (element, index) => {\n        const playlistId = playlistIds[index]\n        const songs = uris.filter((_, i) => labels[i] === element)\n        await fillPlaylist(playlistId, songs)\n    });\n\n}\n\nexport default generateAndFill","import Toast from 'react-bootstrap/Toast'\nimport Button from 'react-bootstrap/Button';\nimport './ToggleableWarning.css';\nimport { Link } from \"react-router-dom\";\nimport generateAndFill from '../services/generateAndFill'\nimport { useHistory } from 'react-router-dom';\n\nconst ToggleableWarning = ({ toggleWarning, warningVisible, userId, uris, labels, showLoading, hideLoading }) => {\n\n    let history = useHistory();\n\n    return (\n        <Toast show={warningVisible} onClose={toggleWarning}>\n            <Toast.Header>\n                <strong className=\"me-auto\">Warning</strong>\n            </Toast.Header>\n            <Toast.Body>\n                <p>By clicking on continue, new playlists will be created for your Spotify account. Click <Link to=\"/\">here</Link> for more information.</p>\n                <Button onClick={async () => {\n                    showLoading('Creating playlists');\n                    await generateAndFill(labels, uris, userId, 'cluster')\n                    hideLoading()\n                    history.push('/result')\n                }}\n                >Continue</Button>\n            </Toast.Body>\n        </Toast>\n    )\n}\n\nexport default ToggleableWarning;\n\n","import { useLocation } from 'react-router-dom';\nimport React, { useState, useEffect } from \"react\";\nimport ScatterPlot from './Plot';\nimport LoadingScreen from './LoadingScreen'\nimport ToggleableWarning from './ToggleableWarning'\nimport styled from \"styled-components\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Button from 'react-bootstrap/Button';\nimport DropdownItem from 'react-bootstrap/esm/DropdownItem';\nimport './Playlist.css';\n\nconst ButtonContainer = styled.div`\n    position: absolute;\n    z-index: 1;\n    margin-top: 2%;\n    margin-left: 5%;\n`\n\nconst GeneratePlaylistsButtonContainer = styled.div`\n    position: fixed;\n    z-index: 2;\n    height: 15vh;\n    width: 15vh;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n\n    text-align: center;\n    color: white;\n`\n\nconst Playlist = ({ getLabels, labels, uris, showLoading, hideLoading }) => {\n\n    const models = {\n        'K-means': {'params': {'n_clusters': 0}},\n        'Affinity Propagation': {'params': {'max_iter': 5000, 'convergence_iter': 150}},\n        'Mean Shift': {'params': {'n_jobs': -1}}\n    }\n\n    const dimensionOptions = {\n        TSNE1: {array: 'TSNE_features', index: 0},\n        TSNE2: {array: 'TSNE_features', index: 1},\n        TSNE3: {array: 'TSNE_features', index: 2},\n        acousticness: {array: 'features', index: 0},\n        danceability: {array: 'features', index: 1},\n        energy: {array: 'features', index: 2},\n        instrumentalness: {array: 'features', index: 3},\n        liveness: {array: 'features', index: 4},\n        loudness: {array: 'features', index: 5},\n        speechiness: {array: 'features', index: 6},\n        tempo: {array: 'features', index: 7},\n        valence: {array: 'features', index: 8}\n    }\n\n    const axes = [\n        'X axis',\n        'Y axis',\n        'Z axis'\n    ]\n\n    const [data, setData] = useState([])\n    const [selectedDimX, setSelectedDimX] = useState([])\n    const [selectedDimY, setSelectedDimY] = useState([])\n    const [selectedDimZ, setSelectedDimZ] = useState([])\n\n    const [XButtonTitle, setXButtonTitle] = useState('TSNE1')\n    const [YButtonTitle, setYButtonTitle] = useState('TSNE2')\n    const [ZButtonTitle, setZButtonTitle] = useState('TSNE3')\n\n    const [warningVisible, setWarningVisible] = useState(false)\n    const [userId, setUserId] = useState('')\n\n    const location = useLocation();\n\n    useEffect(() => {\n        setData(location.data)\n        setSelectedDimX(location.data.TSNE_features.map(x => x[0]))\n        setSelectedDimY(location.data.TSNE_features.map(x => x[1]))\n        setSelectedDimZ(location.data.TSNE_features.map(x => x[2]))\n        setUserId(data.userId)\n    }, [location.data, data])\n\n    const toggleWarning = () => {\n        setWarningVisible(!warningVisible);\n    }\n\n    const selectDims = (axis, value, dim) => {\n        if (axis === 'X axis') {\n            setSelectedDimX(data[value.array].map(x => x[value.index]))\n            setXButtonTitle(dim)\n        } else if (axis === 'Y axis') {\n            setSelectedDimY(data[value.array].map(x => x[value.index]))\n            setYButtonTitle(dim)\n        } else {\n            setSelectedDimZ(data[value.array].map(x => x[value.index]))\n            setZButtonTitle(dim)\n        }\n    }\n\n    const buttonTitle = (axis) => {\n        if (axis === 'X axis') {\n            return XButtonTitle\n        } else if (axis === 'Y axis') {\n            return YButtonTitle\n        } else {\n            return ZButtonTitle\n        }\n    }\n\n    if (data.TSNE_features === undefined) {return <LoadingScreen/>}\n    \n    return(\n        <div>\n            <ButtonContainer>\n                {axes.map((axis, index) => (\n                    <div key={index} style={{color: 'white'}}>\n                        <DropdownButton\n                            title={buttonTitle(axis)}\n                        >\n                            {Object.entries(dimensionOptions).map(([dim, value]) =>\n                                <div key={dim}>\n                                    <Dropdown.Item\n                                        eventKey={dim} \n                                        onClick={() => {selectDims(axis, value, dim)}}\n                                    >{dim}</Dropdown.Item>\n                                </div>\n                            )}\n                        </DropdownButton>\n                    </div>\n                ))}\n                <DropdownButton title='Model Selector'>\n                    {Object.keys(models).map((model, index) => (\n                        <DropdownItem \n                            eventKey={model}\n                            key={index}\n                            onClick={() => {                                \n                                getLabels(model)\n                            }}\n                        >{model}</DropdownItem>\n                    ))}\n                </DropdownButton>\n                {labels.length !== 0 && \n                    <Button\n                        onClick={() => setWarningVisible(true)}\n                    >Generate playlists</Button>\n                }\n            </ButtonContainer>\n            {warningVisible && \n                <GeneratePlaylistsButtonContainer>\n                    <ToggleableWarning\n                        toggleWarning={toggleWarning} \n                        warningVisible={warningVisible} \n                        userId={userId}\n                        uris={uris}\n                        labels={labels}\n                        showLoading={showLoading}\n                        hideLoading={hideLoading}\n                    />\n                </GeneratePlaylistsButtonContainer>\n            }\n            <ScatterPlot\n                data={data}\n                labels={labels} \n                Xdim={selectedDimX}\n                Ydim={selectedDimY}\n                Zdim={selectedDimZ}\n            />\n        </div>\n    )\n}\n\nexport default Playlist","const ErrorPage = () => {\n    return (\n        <div>Page not found</div>\n    )\n}\n\nexport default ErrorPage","import styled from \"styled-components\";\nimport Button from 'react-bootstrap/Button';\nimport { useHistory } from 'react-router-dom';\n\nconst Header = styled.div`\n    font-family: 'Mulish', sans-serif;\n    font-weight: 700;\n    font-size: 4vw;    \n    color: white;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%); \n    position: fixed;\n    text-align: center;\n`\n\nconst ButtonContainer = styled.div`\n    top: 60%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    position: fixed;\n    text-align: center;\n`\n\nconst ResultPage = () => {\n\n    let history = useHistory();\n    \n    return (\n        <div>\n            <Header>Done!</Header>\n            <ButtonContainer>\n                <Button onClick={() => history.push('/')}>Take me back</Button>\n            </ButtonContainer>\n        </div>\n    )\n}\n\nexport default ResultPage","import { Switch, Route, useRouteMatch } from 'react-router-dom';\nimport Login from './components/Login'\nimport Home from './components/Home'\nimport Playlist from './components/Playlist'\nimport LoadingScreen from './components/LoadingScreen'\nimport ErrorScreen from './components/ErrorScreen'\nimport React, { useState, useEffect } from \"react\";\n// import isAuthenticated from './services/isAuthenticated'\n// import getPlaylists from './services/getPlaylists'\n// import getUserProfile from './services/getUserProfile';\n// import handleLogin from './services/handleLogin'\nimport './App.css'\nimport ResultPage from './components/ResultPage';\n\nconst App = ({ loading, loadingCaption, showLoading, hideLoading }) => {\n\n  const [authenticated, setAuthenticated] = useState(false)\n\n  const [playlistList, setPlaylistList] = useState([])\n  const [userInfo, setUserInfo] = useState({})\n  const [titles, setTitles] = useState([])\n  const [artists, setArtists] = useState([])\n  const [ids, setIds] = useState([])\n  const [uris, setUris] = useState([])\n  const [selectedPlaylist, setSelectedPlaylist] = useState('')\n\n  const [features, setFeatures] = useState([])\n  const [TSNEfeatures, setTSNEfeatures] = useState([])\n\n  const [labels, setLabels] = useState([])\n\n  useEffect(() => {\n    // const getAuthenticationStatus = async () => {\n    //   const response = await isAuthenticated()\n    //   console.log(response)\n    //   setAuthenticated(response)\n    // }\n    // getAuthenticationStatus()\n    // hideLoading()\n\n    fetch('/spotify/is-authenticated')\n      .then(response => response.json())\n      .then(data => {\n        console.log(`authentication status: ${data.status}`)\n        setAuthenticated(data.status)\n        hideLoading()\n      })\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (authenticated) {\n      fetch('/spotify/playlists')\n      .then(response => response.json())\n      .then(data => {\n        setPlaylistList(data.playlists.items)\n        console.log(data.playlists.items)\n      })\n      fetch('/spotify/user-profile')\n      .then(response => response.json())\n      .then(data => {\n        setUserInfo(data.user_profile)\n        hideLoading()\n      })\n    }\n\n    // const getPlaylistsAndUserProfile = async (authenticationStatus) => {\n    //   const playlists = await getPlaylists(authenticationStatus)\n    //   setPlaylistList(playlists)\n    //   const userProfile = await getUserProfile(authenticationStatus)\n    //   setUserInfo(userProfile)\n    // }\n    // getPlaylistsAndUserProfile(authenticated)\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [authenticated])\n\n  // setSelectPlaylistId method is passed down so the state can be updated from child components\n  const setSelectPlaylistId = (playlistId) => {\n    setSelectedPlaylist(playlistId)\n  }\n\n  const getLabels = (model) => {\n    showLoading('Calculating labels...')\n    fetch('/spotify/get-labels', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Model': model\n      },\n      body: JSON.stringify(features)\n    })\n    .then(response => response.json())\n    .then(data => {\n\n      hideLoading()\n\n      const interval = setInterval(() => {\n        fetch('/spotify/task-result', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'taskId': data\n          }\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          if (data.state === 'SUCCESS') {\n            setLabels(data.result)\n            clearInterval(interval)\n          }\n        })\n      }, 3000)\n    })\n  }\n\n  const fetchPlaylist = (playlistId) => {\n\n    showLoading('Fetching data points...')\n\n    setTitles([])\n    setArtists([])\n    setFeatures([])\n    setTSNEfeatures([])\n    setIds([])\n    setUris([])\n    setLabels([])\n\n    const features = []\n\n    const getPlaylistDataRecursively = (url) => {\n      return fetch('/spotify/get-track-ids', {headers: {\n        'url': url\n      }})\n      .then(response => response.json())\n      .then(data => {\n\n        console.log(data)\n\n        setTitles(titles => ([...titles, ...data.title]))\n        setArtists(artists => ([...artists, ...data.artist]))\n        setFeatures(features => ([...features, ...data.features]))\n        setIds(ids => ([...ids, ...data.track_ids]))\n        setUris(uris => ([...uris, ...data.track_uris]))\n        features.push(data.features)\n\n        if (data.next_url) {\n          const next_url = data.next_url.replace('https://api.spotify.com/v1', '')\n          return getPlaylistDataRecursively(next_url)\n        } else {\n\n          return fetch('/spotify/dimension-reduction-async', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              'features': features.flat()\n            })\n          })\n          .then(response => response.json())\n          .then(data => {\n            console.log(`task id: ${data}`)\n            const interval = setInterval(() => {\n              fetch('/spotify/task-result', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'taskId': data\n                }\n              })\n              .then(response => response.json())\n              .then(data => {\n                console.log(data)\n                if (data.state === 'SUCCESS') {\n                  setTSNEfeatures(data.result)\n                  clearInterval(interval)\n                }\n              })\n            }, 3000)\n          })\n        }\n      })\n    }\n\n    return getPlaylistDataRecursively(`/playlists/${playlistId}/tracks/?offset=0&limit=100`)\n      .then(() => {\n        hideLoading()\n      });\n  }\n\n  const login = () => {  \n    return(\n    fetch('/spotify/is-authenticated')\n      .then(response => response.json())\n      .then(data => {\n        console.log(data.status)\n        if (!data.status) {\n          fetch('/spotify/get-auth-url')\n            .then(response => response.json())\n            .then(data => {\n              setAuthenticated(true)\n              window.location.replace(data.url)\n            })\n        }\n      })\n    )\n\n    // try {\n    //   const loginUrl = await handleLogin()\n    //   if (loginUrl !== true) {\n    //     setAuthenticated(true)\n    //     window.location.replace(loginUrl)\n    //   } else {\n    //     return loginUrl\n    //   }\n    //   console.log(`login url: ${loginUrl}`)\n    // } catch (e) {\n    //   console.log(e)\n    // }\n    \n  }\n\n  const match = useRouteMatch('/playlists/:id')\n  const playlist = match\n    ? playlistList.find(playlist => playlist.id === Number(match.params.id))\n    : null\n\n  if (loading) { return <LoadingScreen loadingCaption={loadingCaption}/> }\n  return (\n    <div>\n      <Switch>\n        <Route path='/playlists/:id'>\n          <Playlist\n            id={playlist}\n            getLabels={getLabels}\n            labels={labels}\n            uris={uris}\n            showLoading={showLoading}\n            hideLoading={hideLoading}\n          />\n        </Route>\n        <Route path='/login'>\n          <Login login={login} />\n        </Route>\n        <Route path='/result'>\n          <ResultPage/>\n        </Route>\n        <Route path='/'>\n          <Home\n            authenticated={authenticated}\n            userInfo={userInfo}\n            playlistList={playlistList}\n            selectPlaylist={fetchPlaylist}\n            titles={titles}\n            artists={artists}\n            features={features}\n            TSNEfeatures={TSNEfeatures}\n            ids={ids}\n            selectedPlaylist={selectedPlaylist}\n            setSelectPlaylistId={setSelectPlaylistId}\n            getLabels={getLabels}\n          />\n        </Route>\n        <Route component={ErrorScreen} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;","import {\n    BrowserRouter as Router\n  } from \"react-router-dom\";\nimport App from '../App';\nimport { useState } from 'react';\n\n// To get a loading screen between routes, I needed to lift the loading state to a HOC\n\nconst Root = () => {\n\n    const [loading, setLoading] = useState(true)\n    const [loadingCaption, setLoadingCaption] = useState('')\n\n    const showLoading = (loadingCaption) => {\n        setLoading(true)\n        setLoadingCaption(loadingCaption)\n    }\n\n    const hideLoading = () => {\n        setLoading(false)\n        setLoadingCaption('')\n    }\n\n    return(\n        <Router>\n            <App loading={loading} loadingCaption={loadingCaption} showLoading={showLoading} hideLoading={hideLoading}/>\n        </Router>\n    )\n}\n\nexport default Root","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/Root'\n\n// TO-DO\n// if (process.env.NODE_ENV !== \"development\")\n//     console.log = () => {};\n\nReactDOM.render(\n  <Root/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}