{"version":3,"sources":["components/Login.js","components/Covers.js","components/Home.js","hooks/useWinDims.js","components/Plot.js","assets/demo-loader.svg","components/LoadingScreen.js","components/Playlist.js","App.js","components/Root.js","index.js"],"names":["Login","handleLogin","className","onClick","Grid","styled","div","PlaylistsCoversContainer","PlaylistsCover","img","PlaylistsInfoContainer","Covers","images","selectPlaylist","userInfo","titles","ids","artists","features","TSNEfeatures","playlistList","selectedPlaylist","setSelectPlaylistId","data","map","artist","index","history","useHistory","image","src","alt","x","id","display_name","length","push","pathname","Home","authenticated","getLabels","url","to","getWindowDimensions","window","width","innerWidth","height","innerHeight","ScatterPlot","labels","Xdim","Ydim","Zdim","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","axesStyle","tick0","tickcolor","tickwidth","gridcolor","gridwidth","zerolinecolor","zerolinewidth","config","displayModeBar","y","z","type","mode","marker","color","symbol","hoverlabel","bgcolor","hoverinfo","text","dataPointLabels","layout","margin","pad","paper_bgcolor","scene","aspectmode","yaxis","xaxis","zaxis","LoadingAnimationContainer","LoadingScreen","LoadingAnimation","Playlist","dimensionOptions","TSNE1","array","TSNE2","TSNE3","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","tempo","valence","setData","selectedDimX","setSelectedDimX","selectedDimY","setSelectedDimY","selectedDimZ","setSelectedDimZ","XButtonTitle","setXButtonTitle","YButtonTitle","setYButtonTitle","ZButtonTitle","setZButtonTitle","location","useLocation","TSNE_features","buttonTitle","axis","undefined","style","DropdownButton","title","Object","entries","dim","value","Dropdown","Item","eventKey","selectDims","keys","model","DropdownItem","App","loading","showLoading","hideLoading","setAuthenticated","setPlaylistList","setUserInfo","setTitles","setArtists","setIds","setSelectedPlaylist","setFeatures","setTSNEfeatures","setLabels","fetch","then","response","json","console","log","status","playlists","items","user_profile","method","headers","body","JSON","stringify","match","useRouteMatch","playlist","find","Number","params","path","replace","playlistId","getPlaylistDataRecursively","track_ids","next_url","flat","Root","setLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdc407cf.chunk.js","sourcesContent":["import './Login.css';\n\nconst Login = ( {handleLogin} ) => {\n    return (\n        <div className='container'>\n            <div className='typewriter'>\n                <h1>Find clusters in your Spotify playlists using ...</h1>\n            </div>\n            <button className='loginButton' onClick={handleLogin}>Login</button>\n        </div>\n    )\n}\n\nexport default Login","import styled from \"styled-components\";\nimport { useHistory } from 'react-router-dom';\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 50% 50%;\n`\n\nconst PlaylistsCoversContainer = styled.div`\n    grid-row-start: 1;\n    grid-column-start: 1;\n    /* padding: 1em;\n    margin-top: 3em; */\n`\n\nconst PlaylistsCover = styled.img`\n    object-fit: cover;\n    width: 100%;\n    max-height: 100%;\n    margin-left: 50%;\n    transform: translate(-50%);\n    padding: 1em;\n`\n\nconst PlaylistsInfoContainer = styled.div`\n    grid-row-start: 1;\n    grid-column-start: 2;\n    margin-top: 5em;\n    padding: 1em;\n    color: white;\n`\n\nconst Covers = ({ \n    images, \n    selectPlaylist, \n    userInfo, \n    ids, \n    titles, \n    artists, \n    features,\n    TSNEfeatures,\n    playlistList, \n    selectedPlaylist, \n    setSelectPlaylistId,\n    }) => {\n\n    const dataPointLabels = artists.map((artist, index) => {\n        return `${artist} - ${titles[index]}`\n    })\n\n    const data = {'dataPointLabels': dataPointLabels, 'TSNE_features': TSNEfeatures, 'features': features}\n\n    const history = useHistory()\n\n    // history.push({pathname: `playlists/${playlistId}`, data})\n\n    return(\n        <Grid>\n            <PlaylistsCoversContainer>\n                {images.map((image, index) => (\n                    <PlaylistsCover\n                        key={index}\n                        src={image}\n                        alt=\"Playlist cover\"\n                        onClick={() => {\n                            selectPlaylist(playlistList.map(x => x.id)[index])\n                            setSelectPlaylistId(playlistList.map(x => x.id)[index])\n                        }}\n                    />\n                ))}\n            </PlaylistsCoversContainer>\n            <PlaylistsInfoContainer>\n                <h1>Hi, {userInfo.display_name}</h1>\n                <p>Tap a playlist to fetch its data</p>\n                <p>Playlist length: {titles.length}</p>\n                <button onClick={() => {\n                    history.push({pathname: `playlists/${selectedPlaylist}`, data})\n                }}>Plot</button>\n            </PlaylistsInfoContainer>\n        </Grid>\n    )\n}\n\nexport default Covers;","import { Redirect } from 'react-router-dom';\nimport Covers from './Covers'\n\nconst Home = ({ \n    authenticated, \n    userInfo, \n    playlistList, \n    selectPlaylist, \n    titles, \n    features,\n    TSNEfeatures,\n    ids, \n    artists, \n    selectedPlaylist, \n    setSelectPlaylistId,\n    getLabels\n}) => {\n    const images = playlistList.map(x => x.images[0].url)\n    if (authenticated) {\n        return(\n            <Covers\n                images={images} \n                selectPlaylist={selectPlaylist} \n                userInfo={userInfo}\n                titles={titles}\n                artists={artists}\n                features={features}\n                ids={ids}\n                playlistList={playlistList}\n                selectedPlaylist={selectedPlaylist}\n                setSelectPlaylistId={setSelectPlaylistId}\n                TSNEfeatures={TSNEfeatures}\n                getLabels={getLabels}\n            />\n        )\n    } else {\n        return (\n            <Redirect to='/login'/>\n        )\n    }\n}\n\nexport default Home","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import Plot from 'react-plotly.js';\nimport useWindowDimensions from '../hooks/useWinDims'\n\nconst ScatterPlot = ( {data, labels, Xdim, Ydim, Zdim} ) => {\n\n    // first item in tuple in data.titles is the song name, the second item is the artist\n    // const artistsAndTitles = data.titles.map(track => `${track[0]} - ${track[1]}`)\n\n    // use custom hook to retrieve fullscreen measurements\n    const { height, width } = useWindowDimensions()\n\n    const axesStyle = {\n        tick0: 0,\n        tickcolor: \"#D3D3D3\",\n        tickwidth: 2,\n        \n        gridcolor: \"#D3D3D3\",\n        gridwidth: 2,\n        \n        zerolinecolor: \"#D3D3D3\",\n        zerolinewidth: 2\n    }\n\n    return (\n        <Plot\n            config={{displayModeBar: false}}\n            data={[\n                {\n                    x: Xdim,\n                    y: Ydim,\n                    z: Zdim,\n                    type: 'scatter3d',\n                    mode: 'markers',\n                    marker: {color: labels, symbol: 'circle'},\n                    hoverlabel: {bgcolor: 'grey'},\n                    hoverinfo: 'text',\n                    text: data.dataPointLabels\n                }\n            ]}\n            layout={ {\n                displayModeBar: false,\n                margin: {pad: 20},\n                width: width, \n                height: height,\n                paper_bgcolor: 'black',\n                scene: {\n                    aspectmode: 'auto',\n                    yaxis: axesStyle,\n                    xaxis: axesStyle,\n                    zaxis: axesStyle\n                }\n            } }\n        />\n    )\n}\n\nexport default ScatterPlot","export default __webpack_public_path__ + \"static/media/demo-loader.67b2533e.svg\";","import LoadingAnimation from '../assets/demo-loader.svg'\nimport styled from \"styled-components\";\n\nconst LoadingAnimationContainer = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`\n\nconst LoadingScreen = () => (\n    <LoadingAnimationContainer>\n        <object type=\"image/svg+xml\" data={LoadingAnimation}>svg-animation</object>\n    </LoadingAnimationContainer>\n)\n\nexport default LoadingScreen","import { useLocation } from 'react-router-dom';\nimport React, { useState, useEffect } from \"react\";\nimport ScatterPlot from './Plot';\nimport LoadingScreen from './LoadingScreen'\nimport './Playlist.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownItem from 'react-bootstrap/esm/DropdownItem';\n\nconst Playlist = ({ getLabels, labels }) => {\n\n    const models = {\n        'K-means': {'params': {'n_clusters': 0}},\n        'Affinity Propagation': {'params': {'max_iter': 5000, 'convergence_iter': 150}},\n        'Mean Shift': {'params': {'n_jobs': -1}}\n    }\n\n    const dimensionOptions = {\n        TSNE1: {array: 'TSNE_features', index: 0},\n        TSNE2: {array: 'TSNE_features', index: 1},\n        TSNE3: {array: 'TSNE_features', index: 2},\n        acousticness: {array: 'features', index: 0},\n        danceability: {array: 'features', index: 1},\n        energy: {array: 'features', index: 2},\n        instrumentalness: {array: 'features', index: 3},\n        liveness: {array: 'features', index: 4},\n        loudness: {array: 'features', index: 5},\n        speechiness: {array: 'features', index: 6},\n        tempo: {array: 'features', index: 7},\n        valence: {array: 'features', index: 8}\n    }\n\n    const axes = [\n        'X axis',\n        'Y axis',\n        'Z axis'\n    ]\n\n    const [data, setData] = useState([])\n    const [selectedDimX, setSelectedDimX] = useState([])\n    const [selectedDimY, setSelectedDimY] = useState([])\n    const [selectedDimZ, setSelectedDimZ] = useState([])\n\n    const [XButtonTitle, setXButtonTitle] = useState('TSNE1')\n    const [YButtonTitle, setYButtonTitle] = useState('TSNE2')\n    const [ZButtonTitle, setZButtonTitle] = useState('TSNE3')\n\n    const location = useLocation();\n\n    useEffect(() => {\n        setData(location.data)\n        setSelectedDimX(location.data.TSNE_features.map(x => x[0]))\n        setSelectedDimY(location.data.TSNE_features.map(x => x[1]))\n        setSelectedDimZ(location.data.TSNE_features.map(x => x[2]))\n    }, [location.data, data])\n\n    const selectDims = (axis, value, dim) => {\n        if (axis === 'X axis') {\n            setSelectedDimX(data[value.array].map(x => x[value.index]))\n            setXButtonTitle(dim)\n        } else if (axis === 'Y axis') {\n            setSelectedDimY(data[value.array].map(x => x[value.index]))\n            setYButtonTitle(dim)\n        } else {\n            setSelectedDimZ(data[value.array].map(x => x[value.index]))\n            setZButtonTitle(dim)\n        }\n    }\n\n    const buttonTitle = (axis) => {\n        if (axis === 'X axis') {\n            return XButtonTitle\n        } else if (axis === 'Y axis') {\n            return YButtonTitle\n        } else {\n            return ZButtonTitle\n        }\n    }\n\n    if (data.TSNE_features === undefined) {return <LoadingScreen/>}\n    \n    return(\n        <div>\n            <div className='buttonContainer'>\n                {axes.map((axis, index) => (\n                    <div key={index} style={{color: 'white'}}>\n                        {axis}\n                        <DropdownButton\n                            title={buttonTitle(axis)}\n                        >\n                            {Object.entries(dimensionOptions).map(([dim, value]) =>\n                                <div key={dim}>\n                                    <Dropdown.Item \n                                        eventKey={dim} \n                                        onClick={() => {selectDims(axis, value, dim)}}\n                                    >{dim}</Dropdown.Item>\n                                </div>\n                            )}\n                        </DropdownButton>\n                    </div>\n                ))}\n                <DropdownButton title='Model Selector'>\n                    {Object.keys(models).map((model, index) => (\n                        <DropdownItem \n                            eventKey={model}\n                            key={index}\n                            onClick={() => getLabels(model)}\n                        >{model}</DropdownItem>\n                    ))}\n                </DropdownButton>\n            </div>\n            <ScatterPlot \n                data={data}\n                labels={labels} \n                Xdim={selectedDimX}\n                Ydim={selectedDimY}\n                Zdim={selectedDimZ}\n            />\n        </div>\n    )\n}\n\nexport default Playlist","import { Switch, Route, useRouteMatch } from 'react-router-dom';\nimport Login from './components/Login'\nimport Home from './components/Home'\nimport Playlist from './components/Playlist'\nimport LoadingScreen from './components/LoadingScreen'\nimport React, { useState, useEffect } from \"react\";\nimport './App.css'\n\nconst App = ({ loading, showLoading, hideLoading }) => {\n\n  const [authenticated, setAuthenticated] = useState(false)\n\n  const [playlistList, setPlaylistList] = useState([])\n  const [userInfo, setUserInfo] = useState({})\n  const [titles, setTitles] = useState([])\n  const [artists, setArtists] = useState([])\n  const [ids, setIds] = useState([])\n  const [selectedPlaylist, setSelectedPlaylist] = useState('')\n\n  const [features, setFeatures] = useState([])\n  const [TSNEfeatures, setTSNEfeatures] = useState([])\n\n  const [labels, setLabels] = useState([])\n\n  useEffect(() => {\n    fetch('/spotify/is-authenticated')\n      .then(response => response.json())\n      .then(data => {\n        console.log(`authentication status: ${data.status}`)\n        setAuthenticated(data.status)\n        hideLoading()\n      })\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (authenticated) {\n      fetch('/spotify/playlists')\n      .then(response => response.json())\n      .then(data => {\n        const ids = data.playlists.items.map(x => x.id)\n        setIds(ids)\n        setPlaylistList(data.playlists.items)\n      })\n      fetch('/spotify/user-profile')\n      .then(response => response.json())\n      .then(data => {\n        setUserInfo(data.user_profile)\n        hideLoading()\n      })\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [authenticated])\n\n  // setSelectPlaylistId method is passed down so the state can be updated from child components\n  const setSelectPlaylistId = (playlistId) => {\n    setSelectedPlaylist(playlistId)\n  }\n\n  const getLabels = (model) => {\n    showLoading()\n    fetch('/spotify/get-labels', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Model': model\n      },\n      body: JSON.stringify(features)\n    })\n    .then(response => response.json())\n    .then(data => {\n      setLabels(data)\n      hideLoading()\n    })\n  }\n\n  const fetchPlaylist = (playlistId) => {\n\n    showLoading()\n\n    setTitles([])\n    setArtists([])\n    setFeatures([])\n    setTSNEfeatures([])\n    setIds([])\n    setLabels([])\n\n    const features = []\n\n    const getPlaylistDataRecursively = (url) => {\n      return fetch('/spotify/get-track-ids', {headers: {\n        'url': url\n      }})\n      .then(response => response.json())\n      .then(data => {\n\n        console.log(data)\n\n        setTitles(titles => ([...titles, ...data.title]))\n        setArtists(artists => ([...artists, ...data.artist]))\n        setFeatures(features => ([...features, ...data.features]))\n        setIds(ids => ([...ids, ...data.track_ids]))\n        features.push(data.features)\n\n        if (data.next_url) {\n          const next_url = data.next_url.replace('https://api.spotify.com/v1', '')\n          return getPlaylistDataRecursively(next_url)\n        } else {\n          return fetch('/spotify/get-dimension-reduction', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(features.flat())\n          })\n          .then(response => response.json())\n          .then(data => {\n            setTSNEfeatures(data)\n          })\n        }\n      })\n    }\n\n    return getPlaylistDataRecursively(`/playlists/${playlistId}/tracks/?offset=0&limit=100`)\n      .then(() => {\n        hideLoading()\n      });\n  }\n\n  const handleLogin = () => {  \n    return(\n    fetch('/spotify/is-authenticated')\n      .then(response => response.json())\n      .then(data => {\n        if (!data.status) {\n          fetch('/spotify/get-auth-url')\n            .then(response => response.json())\n            .then(data => {\n              setAuthenticated(true)\n              window.location.replace(data.url)\n            })\n        }\n      })\n    )\n  }\n\n  const match = useRouteMatch('/playlists/:id')\n  const playlist = match\n    ? playlistList.find(playlist => playlist.id === Number(match.params.id))\n    : null\n\n  if (loading) { return <LoadingScreen/> }\n  return (\n    <div>\n      <Switch>\n        <Route path='/playlists/:id'>\n          <Playlist\n            id={playlist}\n            getLabels={getLabels}\n            labels={labels}\n          />\n        </Route>\n        <Route path='/login'>\n          <Login handleLogin={handleLogin} />\n        </Route>\n        <Route path='/'>\n          <Home\n            authenticated={authenticated}\n            userInfo={userInfo}\n            playlistList={playlistList}\n            selectPlaylist={fetchPlaylist}\n            titles={titles}\n            artists={artists}\n            features={features}\n            TSNEfeatures={TSNEfeatures}\n            ids={ids}\n            selectedPlaylist={selectedPlaylist}\n            setSelectPlaylistId={setSelectPlaylistId}\n            getLabels={getLabels}\n          />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;","import {\n    BrowserRouter as Router\n  } from \"react-router-dom\";\nimport App from '../App';\nimport { useState } from 'react';\n\n// To get a loading screen between routes, I needed to lift the loading state to a HOC\n\nconst Root = () => {\n\n    const [loading, setLoading] = useState(true)\n\n    const showLoading = () => (\n        setLoading(true)\n    )\n\n    const hideLoading = () => (\n        setLoading(false)\n    )\n\n    return(\n        <Router>\n            <App loading={loading} showLoading={() => showLoading()} hideLoading={() => hideLoading()}/>\n        </Router>\n    )\n}\n\nexport default Root","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/Root'\n\nReactDOM.render(\n  <Root/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}